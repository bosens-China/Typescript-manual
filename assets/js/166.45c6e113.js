(window.webpackJsonp=window.webpackJsonp||[]).push([[166],{844:function(t,s,a){"use strict";a.r(s);var n=a(13),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"typescript-5-6"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#typescript-5-6"}},[t._v("#")]),t._v(" TypeScript 5.6")]),t._v(" "),s("h2",{attrs:{id:"禁止空值和真值检查"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#禁止空值和真值检查"}},[t._v("#")]),t._v(" 禁止空值和真值检查")]),t._v(" "),s("p",[t._v("也许你曾经编写过正则表达式却忘记调用  "),s("code",[t._v(".test(...)")]),t._v(" ：")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("0x[0-9a-f]")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 哎呀！这个代码块总是会执行。")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("或者你可能不小心写了  "),s("code",[t._v("=>")]),t._v(" （创建一个箭头函数）而不是  "),s("code",[t._v(">=")]),t._v(" （大于或等于运算符）：")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 哎呀！这个代码块总是会执行。")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("或者你可能尝试使用  "),s("code",[t._v("??")]),t._v("  设置默认值，但混淆了  "),s("code",[t._v("??")]),t._v("  和比较运算符（如  "),s("code",[t._v("<")]),t._v(" ）的优先级：")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isValid")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  value"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  options"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("any")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  strictness"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'strict'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'loose'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("strictness "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'loose'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    value "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" value "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" options"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("max "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("??")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 哎呀！这被解析为 (value < options.max) ?? 100")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("或者你可能在复杂表达式中放错了括号：")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isValid")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("primaryValue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'strict'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isValid")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("secondaryValue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'strict'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isValid")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("primaryValue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'loose'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isValid")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("secondaryValue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'loose'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//                           ^^^^ 👀 我们忘记闭合 ')' 了吗？")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("这些示例都没有实现作者的意图，但它们都是有效的 JavaScript 代码。\n此前，TypeScript 也默默地接受了这些示例。")]),t._v(" "),s("p",[t._v("通过一些实验，我们发现许多错误可以通过标记上述可疑示例来捕获。\n在 TypeScript 5.6 中，当编译器可以从语法上确定真值或空值检查总是以特定方式求值时，它会报错。\n因此，在上述示例中，你将开始看到错误：")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("0x[0-9a-f]")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  ~~~~~~~~~~~~")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 错误：这种表达式总是为真。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  ~~~~~~")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 错误：这种表达式总是为真。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isValid")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  value"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  options"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("any")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  strictness"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'strict'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'loose'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("strictness "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'loose'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    value "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" value "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" options"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("max "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("??")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     ~~~~~~~~~~~~~~~~~~~")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 错误：?? 的右操作数不可达，因为左操作数永远不会为空。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isValid")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("primaryValue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'strict'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isValid")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("secondaryValue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'strict'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isValid")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("primaryValue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'loose'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isValid")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("secondaryValue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'loose'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//                    ~~~~~~~")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 错误：这种表达式总是为真。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("通过启用 ESLint 的  "),s("code",[t._v("no-constant-binary-expression")]),t._v("  规则也可以实现类似的效果，但 TypeScript 的新检查与 ESLint 规则并不完全重叠，我们认为将这些检查内置到 TypeScript 中具有很大的价值。")]),t._v(" "),s("p",[t._v("需要注意的是，某些表达式仍然被允许，即使它们总是为真或为空。\n特别是  "),s("code",[t._v("true")]),t._v(" 、 "),s("code",[t._v("false")]),t._v(" 、 "),s("code",[t._v("0")]),t._v("  和  "),s("code",[t._v("1")]),t._v("  仍然被允许，尽管它们总是为真或假，因为像以下代码：")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("doStuff")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("something")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("doOtherStuff")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("仍然是惯用且有用的，而像以下代码：")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("inDebuggingOrDevelopmentEnvironment")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("在迭代或调试代码时也很有用。")]),t._v(" "),s("p",[t._v("如果你对这个功能的实现或它捕获的错误类型感兴趣，可以查看实现该功能的 "),s("a",{attrs:{href:"https://github.com/microsoft/TypeScript/pull/51925",target:"_blank",rel:"noopener noreferrer"}},[t._v("Pull Request"),s("OutboundLink")],1),t._v("。")]),t._v(" "),s("h2",{attrs:{id:"迭代器辅助方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#迭代器辅助方法"}},[t._v("#")]),t._v(" 迭代器辅助方法")]),t._v(" "),s("p",[t._v("JavaScript 有可迭代对象（通过调用  "),s("code",[t._v("[Symbol.iterator]()")]),t._v("  并获取迭代器来遍历的对象）和迭代器（具有  "),s("code",[t._v("next()")]),t._v("  方法的对象，可以在遍历时调用以获取下一个值）。\n通常，当你将它们放入  "),s("code",[t._v("for/of")]),t._v("  循环或将它们展开到新数组中时，你不需要考虑这些。\n但 TypeScript 确实用  "),s("code",[t._v("Iterable")]),t._v("  和  "),s("code",[t._v("Iterator")]),t._v("  类型（甚至  "),s("code",[t._v("IterableIterator")]),t._v(" ，它同时兼具两者！）来建模这些对象，这些类型描述了  "),s("code",[t._v("for/of")]),t._v("  等结构所需的最小成员集。")]),t._v(" "),s("p",[t._v("可迭代对象（和  "),s("code",[t._v("IterableIterator")]),t._v(" ）很好，因为它们可以在 JavaScript 的许多地方使用 —— 但许多人发现自己缺少像  "),s("code",[t._v("map")]),t._v(" 、 "),s("code",[t._v("filter")]),t._v("  和  "),s("code",[t._v("reduce")]),t._v("  这样的数组方法。\n这就是为什么 ECMAScript 最近提出了一项提案，将许多数组方法（以及更多）添加到 JavaScript 中生成的大多数  "),s("code",[t._v("IterableIterator")]),t._v("  上。")]),t._v(" "),s("p",[t._v("例如，每个生成器现在都会生成一个同时具有  "),s("code",[t._v("map")]),t._v("  和  "),s("code",[t._v("take")]),t._v("  方法的对象：")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("positiveIntegers")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" evenNumbers "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("positiveIntegers")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出：")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//    2")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//    4")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//    6")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//    8")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   10")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" value "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("of")]),t._v(" evenNumbers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("take")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("console")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("对于  "),s("code",[t._v("Map")]),t._v("  和  "),s("code",[t._v("Set")]),t._v("  的  "),s("code",[t._v("keys()")]),t._v(" 、 "),s("code",[t._v("values()")]),t._v("  和  "),s("code",[t._v("entries()")]),t._v("  方法也是如此：")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token generic-function"}},[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("invertKeysAndValues")]),s("span",{pre:!0,attrs:{class:"token generic class-name"}},[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("K")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("V")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("map"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Map"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("K")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("V")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Map"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("V")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("K")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("entries")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("你还可以扩展新的  "),s("code",[t._v("Iterator")]),t._v("  对象：")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * 提供一个无限的 `0` 流。\n */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Zeroes")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Iterator"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" done"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" zeroes "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Zeroes")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 转换为无限的 `1` 流。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ones "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" zeroes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("你可以使用  "),s("code",[t._v("Iterator.from")]),t._v("  将任何现有的可迭代对象或迭代器适配为这种新类型：")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[t._v("Iterator"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("from")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("filter")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("someFunction"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("所有这些新方法都可以在较新的 JavaScript 运行时中使用，或者你可以使用新的  "),s("code",[t._v("Iterator")]),t._v("  对象的 polyfill。")]),t._v(" "),s("h2",{attrs:{id:"严格的内置迭代器检查-和-strictbuiltiniteratorreturn"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#严格的内置迭代器检查-和-strictbuiltiniteratorreturn"}},[t._v("#")]),t._v(" 严格的内置迭代器检查（和  "),s("code",[t._v("--strictBuiltinIteratorReturn")]),t._v(" ）")]),t._v(" "),s("p",[t._v("当你调用  "),s("code",[t._v("Iterator<T, TReturn>")]),t._v("  的  "),s("code",[t._v("next()")]),t._v("  方法时，它会返回一个具有  "),s("code",[t._v("value")]),t._v("  和  "),s("code",[t._v("done")]),t._v("  属性的对象。这通过  "),s("code",[t._v("IteratorResult")]),t._v("  类型建模：")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IteratorResult"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" TReturn "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("any")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" IteratorYieldResult"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" IteratorReturnResult"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("TReturn"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IteratorYieldResult"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("TYield"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  done"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  value"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" TYield"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IteratorReturnResult"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("TReturn"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  done"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  value"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" TReturn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("这里的命名灵感来自生成器函数的工作方式。\n生成器函数可以生成值，然后返回一个最终值 —— 但两者之间的类型可能无关。")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("abc123")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'c'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" iter "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("abc123")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\niter"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// { value: "a", done: false }')]),t._v("\niter"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// { value: "b", done: false }')]),t._v("\niter"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// { value: "c", done: false }')]),t._v("\niter"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// { value: 123, done: true }")]),t._v("\n")])])]),s("p",[t._v("随着新的  "),s("code",[t._v("IteratorObject")]),t._v("  类型的引入，我们发现允许安全实现  "),s("code",[t._v("IteratorObject")]),t._v("  存在一些困难。\n同时， "),s("code",[t._v("IteratorResult")]),t._v("  在  "),s("code",[t._v("TReturn")]),t._v("  为  "),s("code",[t._v("any")]),t._v(" （默认值！）的情况下存在长期的不安全性。\n例如，假设我们有一个  "),s("code",[t._v("IteratorResult<string, any>")]),t._v(" 。\n如果我们最终访问此类型的值，我们将得到  "),s("code",[t._v("string | any")]),t._v(" ，这实际上就是  "),s("code",[t._v("any")]),t._v(" 。")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("uppercase")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("iter"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Iterator"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("any")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" done "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" iter"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toUppercase")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 哎呀！忘记先检查 `done` 并且拼错了 `toUpperCase`")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("done"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("目前，要在每个迭代器上修复此问题而不引入大量破坏是很困难的，但我们至少可以在大多数创建的  "),s("code",[t._v("IteratorObject")]),t._v("  上修复它。")]),t._v(" "),s("p",[t._v("TypeScript 5.6 引入了一个新的内置类型  "),s("code",[t._v("BuiltinIteratorReturn")]),t._v("  和一个新的  "),s("code",[t._v("--strict-mode")]),t._v("  标志  "),s("code",[t._v("--strictBuiltinIteratorReturn")]),t._v(" 。\n每当在  "),s("code",[t._v("lib.d.ts")]),t._v("  中使用  "),s("code",[t._v("IteratorObject")]),t._v("  时，它们总是用  "),s("code",[t._v("BuiltinIteratorReturn")]),t._v("  类型表示  "),s("code",[t._v("TReturn")]),t._v(" （尽管你会更常见到更具体的  "),s("code",[t._v("MapIterator")]),t._v(" 、 "),s("code",[t._v("ArrayIterator")]),t._v(" 、 "),s("code",[t._v("SetIterator")]),t._v("  等）。")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MapIterator"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IteratorObject"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" BuiltinIteratorReturn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("unknown")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Symbol"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("iterator"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" MapIterator"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("K")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("V")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n   * 返回一个包含 map 中每个条目的键值对的可迭代对象。\n   */")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("entries")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" MapIterator"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("K")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("V")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n   * 返回 map 中键的可迭代对象。\n   */")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("keys")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" MapIterator"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("K")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n   * 返回 map 中值的可迭代对象。\n   */")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("values")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" MapIterator"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("V")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("默认情况下， "),s("code",[t._v("BuiltinIteratorReturn")]),t._v("  是  "),s("code",[t._v("any")]),t._v(" ，但当启用  "),s("code",[t._v("--strictBuiltinIteratorReturn")]),t._v("  时（可能通过  "),s("code",[t._v("--strict")]),t._v(" ），它是  "),s("code",[t._v("undefined")]),t._v(" 。\n在这种新模式下，如果我们使用  "),s("code",[t._v("BuiltinIteratorReturn")]),t._v(" ，前面的示例现在会正确报错：")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("uppercase")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("iter"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Iterator"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" BuiltinIteratorReturn"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" done "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" iter"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toUppercase")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//    ~~~~~ ~~~~~~~~~~~")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// error!┃      ┃")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//       ┃      ┗━ 类型 'string' 上不存在属性 'toUppercase'。你是否指的是 'toUpperCase'？")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//       ┃")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//       ┗━ 'value' 可能为 'undefined'。")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("done"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("你通常会在  "),s("code",[t._v("lib.d.ts")]),t._v("  中看到  "),s("code",[t._v("BuiltinIteratorReturn")]),t._v("  与  "),s("code",[t._v("IteratorObject")]),t._v("  配对使用。\n一般来说，我们建议在你自己的代码中尽可能明确  "),s("code",[t._v("TReturn")]),t._v(" 。")]),t._v(" "),s("p",[t._v("更多信息，你可以在这里阅读该功能的详细信息。")]),t._v(" "),s("h2",{attrs:{id:"支持任意模块标识符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#支持任意模块标识符"}},[t._v("#")]),t._v(" 支持任意模块标识符")]),t._v(" "),s("p",[t._v("JavaScript 允许模块以字符串字面量的形式导出无效标识符名称的绑定：")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" banana "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"🍌"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" banana "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"🍌"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("同样，它也允许模块使用这些任意名称导入并将其绑定到有效标识符：")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"🍌"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" banana "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"./foo"')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * 吃吃吃\n */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("eat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("food"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("console")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Eating"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" food"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("eat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("banana"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("这看起来像是一个可爱的派对技巧（如果你像我们一样在派对上很有趣），但它对于与其他语言的互操作性（通常通过 JavaScript/WebAssembly 边界）很有用，因为其他语言可能对有效标识符的构成有不同的规则。它对于生成代码的工具（如 esbuild 的  "),s("code",[t._v("inject")]),t._v("  功能）也很有用。")]),t._v(" "),s("p",[t._v("TypeScript 5.6 现在允许你在代码中使用这些任意模块标识符！\n我们要感谢 Evan Wallace 为 TypeScript 贡献了这一更改！")]),t._v(" "),s("h2",{attrs:{id:"nouncheckedsideeffectimports-选项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nouncheckedsideeffectimports-选项"}},[t._v("#")]),t._v(" "),s("code",[t._v("--noUncheckedSideEffectImports")]),t._v("  选项")]),t._v(" "),s("p",[t._v("在 JavaScript 中，可以在不实际导入任何值的情况下导入模块：")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'some-module'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("这些导入通常被称为副作用导入，因为它们唯一有用的行为是通过执行某些副作用（如注册全局变量或将 polyfill 添加到原型）来提供的。")]),t._v(" "),s("p",[t._v("在 TypeScript 中，这种语法有一个相当奇怪的怪癖：如果导入可以解析为有效的源文件，那么 TypeScript 会加载并检查该文件。\n另一方面，如果找不到源文件，TypeScript 会默默地忽略该导入！")]),t._v(" "),s("p",[t._v("这种行为令人惊讶，但它部分源于对 JavaScript 生态系统中模式的建模。\n例如，这种语法也用于 bundler 中的特殊加载器来加载 CSS 或其他资源。\n你的 bundler 可能配置为通过编写如下内容来包含特定的  "),s("code",[t._v(".css")]),t._v("  文件：")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./button-component.css'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Button")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("尽管如此，这掩盖了副作用导入中潜在的拼写错误。\n这就是为什么 TypeScript 5.6 引入了一个新的编译器选项  "),s("code",[t._v("--noUncheckedSideEffectImports")]),t._v("  来捕获这些情况。\n当启用  "),s("code",[t._v("--noUncheckedSideEffectImports")]),t._v("  时，如果 TypeScript 找不到副作用导入的源文件，它将报错。")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'oops-this-module-does-not-exist'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 错误：找不到模块 'oops-this-module-does-not-exist' 或其对应的类型声明。")]),t._v("\n")])])]),s("p",[t._v("启用此选项后，一些原本可以工作的代码现在可能会收到错误，例如上面的 CSS 示例。\n为了解决这个问题，只想为资源编写副作用导入的用户可能更适合编写带有通配符说明符的环境模块声明。\n它会放在一个全局文件中，看起来像这样：")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ./src/globals.d.ts")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将所有 CSS 文件识别为模块导入。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("declare")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("module")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'*.css'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("事实上，你的项目中可能已经有这样的文件了！\n例如，运行类似  "),s("code",[t._v("vite init")]),t._v("  的命令可能会创建一个类似的  "),s("code",[t._v("vite-env.d.ts")]),t._v("  文件。")]),t._v(" "),s("p",[t._v("虽然此选项目前默认关闭，但我们鼓励用户尝试使用它！")]),t._v(" "),s("p",[t._v("更多信息，请查看此功能的实现。")]),t._v(" "),s("h2",{attrs:{id:"nocheck-选项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nocheck-选项"}},[t._v("#")]),t._v(" "),s("code",[t._v("--noCheck")]),t._v("  选项")]),t._v(" "),s("p",[t._v("TypeScript 5.6 引入了一个新的编译器选项  "),s("code",[t._v("--noCheck")]),t._v(" ，它允许你跳过对所有输入文件的类型检查。\n这在执行生成输出文件所需的语义分析时避免了不必要的类型检查。")]),t._v(" "),s("p",[t._v("一个场景是将 JavaScript 文件生成与类型检查分开，以便两者可以作为单独的阶段运行。\n例如，你可以在迭代时运行  "),s("code",[t._v("tsc --noCheck")]),t._v(" ，然后运行  "),s("code",[t._v("tsc --noEmit")]),t._v("  进行彻底的类型检查。\n你还可以并行运行这两个任务，甚至在  "),s("code",[t._v("--watch")]),t._v("  模式下，但请注意，如果你真的同时运行它们，你可能需要指定一个单独的  "),s("code",[t._v("--tsBuildInfoFile")]),t._v("  路径。")]),t._v(" "),s("p",[s("code",[t._v("--noCheck")]),t._v("  对于以类似方式生成声明文件也很有用。\n在指定了  "),s("code",[t._v("--noCheck")]),t._v("  的项目中，如果项目符合  "),s("code",[t._v("--isolatedDeclarations")]),t._v(" ，TypeScript 可以快速生成声明文件而无需进行类型检查。\n生成的声明文件将完全依赖于快速的语法转换。")]),t._v(" "),s("p",[t._v("请注意，在指定了  "),s("code",[t._v("--noCheck")]),t._v("  但项目未使用  "),s("code",[t._v("--isolatedDeclarations")]),t._v("  的情况下，TypeScript 可能仍会执行尽可能多的类型检查以生成  "),s("code",[t._v(".d.ts")]),t._v("  文件。\n从这个意义上说， "),s("code",[t._v("--noCheck")]),t._v("  有点用词不当；\n然而，该过程将比完整的类型检查更懒，仅计算未注释声明的类型。\n这应该比完整的类型检查快得多。")]),t._v(" "),s("p",[s("code",[t._v("noCheck")]),t._v("  也可以通过 TypeScript API 作为标准选项使用。\n在内部， "),s("code",[t._v("transpileModule")]),t._v("  和  "),s("code",[t._v("transpileDeclaration")]),t._v("  已经使用  "),s("code",[t._v("noCheck")]),t._v("  来加速（至少在 TypeScript 5.5 中）。\n现在，任何构建工具都应该能够利用该标志，采取各种自定义策略来协调和加速构建。")]),t._v(" "),s("p",[t._v("更多信息，请参阅 TypeScript 5.5 中为  "),s("code",[t._v("noCheck")]),t._v("  内部提速所做的工作，以及使其在命令行和 API 中公开的相关工作。")]),t._v(" "),s("h2",{attrs:{id:"允许在中间错误时继续构建"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#允许在中间错误时继续构建"}},[t._v("#")]),t._v(" 允许在中间错误时继续构建")]),t._v(" "),s("p",[t._v("TypeScript 的项目引用概念允许你将代码库组织为多个项目并创建它们之间的依赖关系。\n在  "),s("code",[t._v("--build")]),t._v("  模式下运行 TypeScript 编译器（或简写为  "),s("code",[t._v("tsc -b")]),t._v(" ）是实际跨项目构建并确定需要编译的项目和文件的内置方式。")]),t._v(" "),s("p",[t._v("以前，使用  "),s("code",[t._v("--build")]),t._v("  模式会假设  "),s("code",[t._v("--noEmitOnError")]),t._v("  并在遇到任何错误时立即停止构建。\n这意味着如果任何 “上游” 依赖项有构建错误，“下游” 项目将永远不会被检查和构建。\n理论上，这是一种非常合理的方法 —— 如果一个项目有错误，它不一定处于其依赖项的一致状态。")]),t._v(" "),s("p",[t._v("实际上，这种僵化使得升级等工作变得痛苦。\n例如，如果  "),s("code",[t._v("projectB")]),t._v("  依赖于  "),s("code",[t._v("projectA")]),t._v(" ，那么更熟悉  "),s("code",[t._v("projectB")]),t._v("  的人无法主动升级他们的代码，直到他们的依赖项升级完毕。\n他们被  "),s("code",[t._v("projectA")]),t._v("  的升级工作所阻碍。")]),t._v(" "),s("p",[t._v("从 TypeScript 5.6 开始， "),s("code",[t._v("--build")]),t._v("  模式将继续构建项目，即使依赖项中存在中间错误。\n在存在中间错误的情况下，它们将被一致地报告，并且输出文件将尽最大努力生成；但是，构建将继续完成指定的项目。")]),t._v(" "),s("p",[t._v("如果你想在第一个出现错误的项目上停止构建，你可以使用一个名为  "),s("code",[t._v("--stopOnBuildErrors")]),t._v("  的新标志。这在 CI 环境中运行时，或者在迭代一个被其他项目严重依赖的项目时非常有用。")]),t._v(" "),s("p",[t._v("请注意，为了实现这一点，TypeScript 现在总是为  "),s("code",[t._v("--build")]),t._v("  调用中的任何项目生成  "),s("code",[t._v(".tsbuildinfo")]),t._v("  文件（即使未指定  "),s("code",[t._v("--incremental/--composite")]),t._v(" ）。\n这是为了跟踪  "),s("code",[t._v("--build")]),t._v("  的调用状态以及未来需要执行的工作。")]),t._v(" "),s("p",[t._v("你可以在这里阅读有关此更改的更多信息。")]),t._v(" "),s("h2",{attrs:{id:"编辑器中的区域优先诊断"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#编辑器中的区域优先诊断"}},[t._v("#")]),t._v(" 编辑器中的区域优先诊断")]),t._v(" "),s("p",[t._v("当 TypeScript 的语言服务被请求获取文件的诊断信息（如错误、建议和弃用）时，它通常需要检查整个文件。\n大多数情况下这没问题，但在非常大的文件中，这可能会导致延迟。\n这可能令人沮丧，因为修复拼写错误应该感觉是一个快速操作，但在足够大的文件中可能需要几秒钟。")]),t._v(" "),s("p",[t._v("为了解决这个问题，TypeScript 5.6 引入了一个名为区域优先诊断或区域优先检查的新功能。\n编辑器现在不仅可以请求一组文件的诊断信息，还可以提供给定文件的相关区域 —— 其意图是这通常是用户当前可见的文件区域。\nTypeScript 语言服务器然后可以选择提供两组诊断信息：一组用于该区域，另一组用于整个文件。\n这使得在大型文件中编辑感觉更加响应迅速，因为你不会等待那么长时间让红色波浪线消失。")]),t._v(" "),s("p",[t._v("对于一些具体数字，在我们的测试中，TypeScript 自己的  "),s("code",[t._v("checker.ts")]),t._v("  的完整语义诊断响应耗时 3330 毫秒。\n相比之下，第一个基于区域的诊断响应耗时 143 毫秒！\n而剩余的全文件响应耗时约 3200 毫秒，这对于快速编辑来说可以产生巨大的差异。")]),t._v(" "),s("p",[t._v("此功能还包括大量工作，以使诊断在整个体验中更一致地报告。\n由于我们的类型检查器利用缓存来避免工作，相同类型之间的后续检查通常会有不同的（通常更短的）错误消息。\n从技术上讲，懒惰的乱序检查可能会导致诊断在编辑器中的两个位置之间报告不同 —— 甚至在此功能之前 —— 但我们不想加剧这个问题。\n通过最近的工作，我们已经消除了许多这些错误不一致。")]),t._v(" "),s("p",[t._v("目前，此功能在 Visual Studio Code 中可用于 TypeScript 5.6 及更高版本。")]),t._v(" "),s("p",[t._v("更多详细信息，请查看此功能的实现和说明。")]),t._v(" "),s("h2",{attrs:{id:"细粒度的提交字符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#细粒度的提交字符"}},[t._v("#")]),t._v(" 细粒度的提交字符")]),t._v(" "),s("p",[t._v("TypeScript 的语言服务现在为每个补全项提供自己的提交字符。\n提交字符是特定字符，当键入时，它们会自动提交当前建议的补全项。")]),t._v(" "),s("p",[t._v("这意味着随着时间的推移，当你键入某些字符时，你的编辑器将更频繁地提交当前建议的补全项。\n例如，以下代码：")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("declare")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" food"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("eat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("any")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" f "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("foo"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**/")]),t._v("\n")])])]),s("p",[t._v("如果我们的光标位于  "),s("code",[t._v("/**/")]),t._v(" ，我们正在编写的代码可能是  "),s("code",[t._v("let f = (food.eat())")]),t._v("  或  "),s("code",[t._v("let f = (foo, bar) => foo + bar")]),t._v(" 。\n你可以想象，编辑器可能会根据我们接下来键入的字符自动完成不同的内容。\n例如，如果我们键入句点 / 点字符 ( "),s("code",[t._v(".")]),t._v(" )，我们可能希望编辑器用变量  "),s("code",[t._v("food")]),t._v("  完成；\n但如果我们键入逗号字符 ( "),s("code",[t._v(",")]),t._v(" )，我们可能正在编写箭头函数中的参数。")]),t._v(" "),s("p",[t._v("不幸的是，以前 TypeScript 只是向编辑器发出信号，表明当前文本可能定义了一个新的参数名称，因此没有安全的提交字符。\n因此，即使很明显编辑器应该用单词  "),s("code",[t._v("food")]),t._v("  自动完成，按下  "),s("code",[t._v(".")]),t._v("  也不会做任何事情。")]),t._v(" "),s("p",[t._v("TypeScript 现在明确列出了每个完成项的安全提交字符。\n虽然这不会立即改变你的日常体验，但支持这些提交字符的编辑器应该会随着时间的推移看到行为改进。\n要立即看到这些改进，你现在可以在 Visual Studio Code Insiders 中使用 TypeScript 夜间扩展。\n在上面的代码中按下  "),s("code",[t._v(".")]),t._v("  会正确自动完成  "),s("code",[t._v("food")]),t._v(" 。")]),t._v(" "),s("p",[t._v("更多信息，请参阅添加提交字符的 Pull Request 以及我们根据上下文调整提交字符的工作。")]),t._v(" "),s("h2",{attrs:{id:"自动导入的排除模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自动导入的排除模式"}},[t._v("#")]),t._v(" 自动导入的排除模式")]),t._v(" "),s("p",[t._v("TypeScript 的语言服务现在允许你指定一个正则表达式模式列表，这些模式将过滤掉某些说明符的自动导入建议。\n例如，如果你想排除像  "),s("code",[t._v("lodash")]),t._v("  这样的包的所有 “深层” 导入，你可以在 Visual Studio Code 中配置以下首选项：")]),t._v(" "),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"typescript.preferences.autoImportSpecifierExcludeRegexes"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"^lodash/.*$"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("或者反过来，你可能希望禁止从包的入口点导入：")]),t._v(" "),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"typescript.preferences.autoImportSpecifierExcludeRegexes"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"^lodash$"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("你甚至可以通过以下设置避免  "),s("code",[t._v("node:")]),t._v("  导入：")]),t._v(" "),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"typescript.preferences.autoImportSpecifierExcludeRegexes"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"^node:"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("要指定某些正则表达式标志（如  "),s("code",[t._v("i")]),t._v("  或  "),s("code",[t._v("u")]),t._v(" ），你需要用斜杠包围你的正则表达式。\n当提供包围斜杠时，你需要转义其他内部斜杠。")]),t._v(" "),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"typescript.preferences.autoImportSpecifierExcludeRegexes"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"^./lib/internal"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不需要转义")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/^.\\\\/lib\\\\/internal/"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 需要转义 - 注意前导和尾随斜杠")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/^.\\\\/lib\\\\/internal/i"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 需要转义 - 我们需要斜杠来提供 'i' 正则表达式标志")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("相同的设置可以通过 VS Code 中的  "),s("code",[t._v("javascript.preferences.autoImportSpecifierExcludeRegexes")]),t._v("  应用于 JavaScript。")]),t._v(" "),s("p",[t._v("请注意，虽然此选项可能与  "),s("code",[t._v("typescript.preferences.autoImportFileExcludePatterns")]),t._v("  有一些重叠，但存在差异。\n现有的  "),s("code",[t._v("autoImportFileExcludePatterns")]),t._v("  接受一个排除文件路径的 glob 模式列表。\n这对于许多你想避免从特定文件和目录自动导入的场景可能更简单，但这并不总是足够的。\n例如，如果你使用  "),s("code",[t._v("@types/node")]),t._v("  包，同一个文件声明了  "),s("code",[t._v("fs")]),t._v("  和  "),s("code",[t._v("node:fs")]),t._v(" ，所以我们不能使用  "),s("code",[t._v("autoImportExcludePatterns")]),t._v("  来过滤掉其中一个。")]),t._v(" "),s("p",[t._v("新的  "),s("code",[t._v("autoImportSpecifierExcludeRegexes")]),t._v("  特定于模块说明符（我们在导入语句中编写的特定字符串），所以我们可以编写一个模式来排除  "),s("code",[t._v("fs")]),t._v("  或  "),s("code",[t._v("node:fs")]),t._v("  而不排除另一个。\n更重要的是，我们可以编写模式来强制自动导入更喜欢不同的说明符样式（例如，更喜欢  "),s("code",[t._v("./foo/bar.js")]),t._v("  而不是  "),s("code",[t._v("#foo/bar.js")]),t._v(" ）。")]),t._v(" "),s("p",[t._v("更多信息，请查看此功能的实现。")]),t._v(" "),s("h2",{attrs:{id:"值得注意的行为变化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#值得注意的行为变化"}},[t._v("#")]),t._v(" 值得注意的行为变化")]),t._v(" "),s("p",[t._v("本节重点介绍一些值得注意的变化，这些变化应在任何升级中被确认和理解。有时它会突出显示弃用、移除和新限制。它还可以包含功能上改进的错误修复，但这些修复也可能通过引入新错误影响现有构建。")]),t._v(" "),s("h3",{attrs:{id:"lib-d-ts"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#lib-d-ts"}},[t._v("#")]),t._v(" "),s("code",[t._v("lib.d.ts")])]),t._v(" "),s("p",[t._v("为 DOM 生成的类型可能会影响你的代码库的类型检查。更多信息，请参阅与 DOM 和  "),s("code",[t._v("lib.d.ts")]),t._v("  更新相关的此版本 TypeScript 的问题。")]),t._v(" "),s("h3",{attrs:{id:"始终写入-tsbuildinfo"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#始终写入-tsbuildinfo"}},[t._v("#")]),t._v(" 始终写入  "),s("code",[t._v(".tsbuildinfo")])]),t._v(" "),s("p",[t._v("为了启用  "),s("code",[t._v("--build")]),t._v("  在依赖项中存在中间错误时继续构建项目，并支持命令行上的  "),s("code",[t._v("--noCheck")]),t._v(" ，TypeScript 现在总是为  "),s("code",[t._v("--build")]),t._v("  调用中的任何项目生成  "),s("code",[t._v(".tsbuildinfo")]),t._v("  文件。\n无论是否实际启用了  "),s("code",[t._v("--incremental")]),t._v(" ，都会发生这种情况。更多信息请参见此处。")]),t._v(" "),s("h3",{attrs:{id:"尊重-node-modules-中的文件扩展名和-package-json"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#尊重-node-modules-中的文件扩展名和-package-json"}},[t._v("#")]),t._v(" 尊重  "),s("code",[t._v("node_modules")]),t._v("  中的文件扩展名和  "),s("code",[t._v("package.json")])]),t._v(" "),s("p",[t._v("在 Node.js 实现 ECMAScript 模块支持之前（v12），TypeScript 从来没有一个好的方法来知道它在  "),s("code",[t._v("node_modules")]),t._v("  中找到的  "),s("code",[t._v(".d.ts")]),t._v("  文件是代表作为 CommonJS 还是 ECMAScript 模块编写的 JavaScript 文件。当绝大多数 npm 只是 CommonJS 时，这并没有引起太多问题 —— 如果有疑问，TypeScript 可以假设一切都像 CommonJS 一样运行。不幸的是，如果这种假设是错误的，它可能会允许不安全的导入：")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// node_modules/dep/index.d.ts")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("declare")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("doSomething")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// index.ts")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 如果 "dep" 是 CommonJS 模块，这是可以的，但如果')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 它是 ECMAScript 模块，则会失败——即使在捆绑器中！")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" dep "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'dep'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ndep"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("doSomething")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("在实践中，这种情况并不常见。但在 Node.js 开始支持 ECMAScript 模块以来的几年里，npm 上 ESM 的份额有所增长。幸运的是，Node.js 还引入了一种机制，可以帮助 TypeScript 确定文件是 ECMAScript 模块还是 CommonJS 模块： "),s("code",[t._v(".mjs")]),t._v("  和  "),s("code",[t._v(".cjs")]),t._v("  文件扩展名以及  "),s("code",[t._v("package.json")]),t._v("  中的  "),s("code",[t._v('"type"')]),t._v("  字段。TypeScript 4.7 添加了对理解这些指示器的支持，以及编写  "),s("code",[t._v(".mts")]),t._v("  和  "),s("code",[t._v(".cts")]),t._v("  文件的支持；然而，TypeScript 只会在  "),s("code",[t._v("--module node16")]),t._v("  和  "),s("code",[t._v("--module nodenext")]),t._v("  下读取这些指示器，因此对于使用  "),s("code",[t._v("--module esnext")]),t._v("  和  "),s("code",[t._v("--moduleResolution bundler")]),t._v("  的人来说，上面的不安全导入仍然是一个问题。")]),t._v(" "),s("p",[t._v("为了解决这个问题，TypeScript 5.6 收集模块格式信息，并使用它来解析所有模块模式（除了  "),s("code",[t._v("amd")]),t._v(" 、 "),s("code",[t._v("umd")]),t._v("  和  "),s("code",[t._v("system")]),t._v(" ）中的歧义。格式特定的文件扩展名（ "),s("code",[t._v(".mts")]),t._v("  和  "),s("code",[t._v(".cts")]),t._v(" ）在任何地方都被尊重，并且  "),s("code",[t._v("package.json")]),t._v("  中的  "),s("code",[t._v('"type"')]),t._v("  字段在  "),s("code",[t._v("node_modules")]),t._v("  依赖项中被查阅，无论模块设置如何。以前，技术上可以将 CommonJS 输出生成到  "),s("code",[t._v(".mjs")]),t._v("  文件中，反之亦然：")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// main.mts")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'oops'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// $ tsc --module commonjs main.mts")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// main.mjs")]),t._v("\nObject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("defineProperty")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("exports"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'__esModule'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nexports"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("default "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'oops'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("现在， "),s("code",[t._v(".mts")]),t._v("  文件永远不会生成 CommonJS 输出，而  "),s("code",[t._v(".cts")]),t._v("  文件永远不会生成 ESM 输出。")]),t._v(" "),s("p",[t._v("请注意，这种行为的大部分在 TypeScript 5.5 的预发布版本中提供（实现细节在此），但在 5.6 中，此行为仅扩展到  "),s("code",[t._v("node_modules")]),t._v("  中的文件。")]),t._v(" "),s("p",[t._v("更多详细信息，请参阅此更改。")]),t._v(" "),s("h2",{attrs:{id:"计算属性的正确覆盖检查"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#计算属性的正确覆盖检查"}},[t._v("#")]),t._v(" 计算属性的正确覆盖检查")]),t._v(" "),s("p",[t._v("以前，标记为  "),s("code",[t._v("override")]),t._v("  的计算属性没有正确检查基类成员的存在。同样，如果你使用  "),s("code",[t._v("noImplicitOverride")]),t._v(" ，如果你忘记向计算属性添加  "),s("code",[t._v("override")]),t._v("  修饰符，你不会收到错误。")]),t._v(" "),s("p",[t._v("TypeScript 5.6 现在正确检查这两种情况下的计算属性。")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" foo "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Symbol")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'foo'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" bar "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Symbol")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bar'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Base")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("bar"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Derived")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Base")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  override "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("foo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//           ~~~~~")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 错误：此成员不能有 'override' 修饰符，因为它未在基类 'Base' 中声明。")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("bar"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  ~~~~~")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在 noImplicitOverride 下的错误：此成员必须具有 'override' 修饰符，因为它覆盖了基类 'Base' 中的成员。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("此修复由 Oleksandr Tarasiuk 在此 Pull Request 中贡献。")])])}),[],!1,null,null,null);s.default=e.exports}}]);
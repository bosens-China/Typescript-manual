(window.webpackJsonp=window.webpackJsonp||[]).push([[177],{856:function(t,e,v){"use strict";v.r(e);var _=v(13),s=Object(_.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"架构概述"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#架构概述"}},[t._v("#")]),t._v(" 架构概述")]),t._v(" "),e("h2",{attrs:{id:"层次概述"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#层次概述"}},[t._v("#")]),t._v(" 层次概述")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://raw.githubusercontent.com/wiki/Microsoft/TypeScript/images/architecture.png",alt:"Architectural overview."}})]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("核心 TypeScript 编译器")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("语法分析器（Parser）：")]),t._v(" 以一系列原文件开始，根据语言的语法，生成抽象语法树（AST）")]),t._v(" "),e("li",[e("strong",[t._v("联合器（Binder）：")]),t._v(" 使用一个 "),e("code",[t._v("Symbol")]),t._v("  将针对相同结构的声明联合在一起（例如：同一个接口或模块的不同声明，或拥有相同名字的函数和模块）。这能帮助类型系统推导出这些具名的声明。")]),t._v(" "),e("li",[e("strong",[t._v("类型解析器与检查器（Type resolver / Checker）：")]),t._v(" 解析每种类型的构造，检查读写语义并生成适当的诊断信息。")]),t._v(" "),e("li",[e("strong",[t._v("生成器（Emitter）：")]),t._v(" 从一系列输入文件（.ts 和.d.ts）生成输出，它们可以是以下形式之一：JavaScript（.js），声明（.d.ts），或者是 source maps（.js.map）。")]),t._v(" "),e("li",[e("strong",[t._v("预处理器（Pre-processor）：")]),t._v(" “编译上下文” 指的是某个 “程序” 里涉及到的所有文件。上下文的创建是通过检查所有从命令行上传入编译器的文件，按顺序，然后再加入这些文件直接引用的其它文件或通过 "),e("code",[t._v("import")]),t._v("  语句和 "),e("code",[t._v("/// <reference path=... />")]),t._v("  标签间接引用的其它文件。")])])])]),t._v(" "),e("p",[t._v("沿着引用图走下来你会发现它是一个有序的源文件列表，它们组成了整个程序。 当解析导出（import）的时候，会优先选择 “.ts” 文件而不是 “.d.ts” 文件，以确保处理的是最新的文件。 编译器会进行与 Nodejs 相似的流程来解析导入，沿着目录链查找与将要导入相匹配的带.ts 或.d.ts 扩展名的文件。 导入失败不会报 error，因为可能已经声明了外部模块。")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("独立编译器（tsc）：")]),t._v(" 批处理编译命令行界面。主要处理针对不同支持的引擎读写文件（比如：Node.js）。")]),t._v(" "),e("li",[e("strong",[t._v("语言服务：")]),t._v(" “语言服务” 在核心编译器管道上暴露了额外的一层，非常适合类编辑器的应用。")])]),t._v(" "),e("p",[t._v("语言服务支持一系列典型的编辑器操作比如语句自动补全，函数签名提示，代码格式化和突出高亮，着色等。 基本的重构功能比如重命名，调试接口辅助功能比如验证断点，还有 TypeScript 特有的功能比如支持增量编译（在命令行上使用 "),e("code",[t._v("--watch")]),t._v(" ）。 语言服务是被设计用来有效的处理在一个长期存在的编译上下文中文件随着时间改变的情况；在这样的情况下，语言服务提供了与其它编译器接口不同的角度来处理程序和源文件。")]),t._v(" "),e("blockquote",[e("p",[t._v("请参考 [[Using the Language Service API]] 以了解更多详细内容。")])]),t._v(" "),e("h2",{attrs:{id:"数据结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据结构"}},[t._v("#")]),t._v(" 数据结构")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("Node:")]),t._v(" 抽象语法树（AST）的基本组成块。通常 "),e("code",[t._v("Node")]),t._v("  表示语言语法里的非终结符；一些终结符保存在语法树里比如标识符和字面量。")]),t._v(" "),e("li",[e("strong",[t._v("SourceFile:")]),t._v(" 给定源文件的 AST。 "),e("code",[t._v("SourceFile")]),t._v("  本身是一个 "),e("code",[t._v("Node")]),t._v(" ；它提供了额外的接口用来访问文件的源码，文件里的引用，文件里的标识符列表和文件里的某个位置与它对应的行号与列号的映射。")]),t._v(" "),e("li",[e("strong",[t._v("Program:")]),t._v(" "),e("code",[t._v("SourceFile")]),t._v("  的集合和一系列编译选项代表一个编译单元。 "),e("code",[t._v("Program")]),t._v("  是类型系统和生成代码的主入口。")]),t._v(" "),e("li",[e("strong",[t._v("Symbol:")]),t._v(" 具名的声明。 "),e("code",[t._v("Symbols")]),t._v("  是做为联合的结果而创建。 "),e("code",[t._v("Symbols")]),t._v("  连接了树里的声明节点和其它对同一个实体的声明。 "),e("code",[t._v("Symbols")]),t._v("  是语义系统的基本构建块。")]),t._v(" "),e("li",[e("strong",[t._v("Type:")]),t._v(" "),e("code",[t._v("Type")]),t._v("  是语义系统的其它部分。 "),e("code",[t._v("Type")]),t._v("  可能被命名（比如，类和接口），或匿名（比如，对象类型）。")]),t._v(" "),e("li",[e("strong",[t._v("Signature:")]),t._v(" 一共有三种 "),e("code",[t._v("Signature")]),t._v("  类型：调用签名（call），构造签名（construct）和索引签名（index）。")])]),t._v(" "),e("h2",{attrs:{id:"编译过程概述"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#编译过程概述"}},[t._v("#")]),t._v(" 编译过程概述")]),t._v(" "),e("p",[t._v("整个过程从预处理开始。 预处理器会算出哪些文件参与编译，它会去查找如下引用（ "),e("code",[t._v("/// <reference path=... />")]),t._v("  标签和 "),e("code",[t._v("import")]),t._v("  语句）。")]),t._v(" "),e("p",[t._v("语法分析器（Parser）生成抽象语法树（AST） "),e("code",[t._v("Node")]),t._v(" . 这些仅为用户输出的抽象表现，以树的形式。 一个 "),e("code",[t._v("SourceFile")]),t._v("  对象表示一个给定文件的 AST 并且带有一些额外的信息如文件名及源文件内容。")]),t._v(" "),e("p",[t._v("然后，联合器（Binder）处理 AST 节点，结合并生成 "),e("code",[t._v("Symbols")]),t._v(" 。 一个 "),e("code",[t._v("Symbol")]),t._v("  会对应到一个命名实体。 这里有个一微妙的差别，几个声明节点可能会是名字相同的实体。 也就是说，有时候不同的 "),e("code",[t._v("Node")]),t._v("  具有相同的 "),e("code",[t._v("Symbol")]),t._v(" ，并且每个 "),e("code",[t._v("Symbol")]),t._v("  保持跟踪它的声明节点。 比如，一个名字相同的 "),e("code",[t._v("class")]),t._v("  和 "),e("code",[t._v("namespace")]),t._v("  可以"),e("em",[t._v("合并")]),t._v("，并且拥有相同的 "),e("code",[t._v("Symbol")]),t._v(" 。 联合器也会处理作用域，以确保每个 "),e("code",[t._v("Symbol")]),t._v("  都在正确的封闭作用域里创建。")]),t._v(" "),e("p",[t._v("生成 "),e("code",[t._v("SourceFile")]),t._v(" （还带有它的 "),e("code",[t._v("Symbols")]),t._v("  们）是通过调用 "),e("code",[t._v("createSourceFile")]),t._v("  API。")]),t._v(" "),e("p",[t._v("到目前为止， "),e("code",[t._v("Symbol")]),t._v("  代表的命名实体可以在单个文件里看到，但是有些声明可以从多文件合并，因此下一步就是构建一个全局的包含所有文件的视图，也就是创建一个 "),e("code",[t._v("Program")]),t._v(" 。")]),t._v(" "),e("p",[t._v("一个 "),e("code",[t._v("Program")]),t._v("  是 "),e("code",[t._v("SourceFile")]),t._v("  的集合并带有一系列 "),e("code",[t._v("CompilerOptions")]),t._v(" 。 通过调用 "),e("code",[t._v("createProgram")]),t._v("  API 来创建 "),e("code",[t._v("Program")]),t._v(" 。")]),t._v(" "),e("p",[t._v("通过一个 "),e("code",[t._v("Program")]),t._v("  实例创建 "),e("code",[t._v("TypeChecker")]),t._v(" 。  "),e("code",[t._v("TypeChecker")]),t._v("  是 TypeScript 类型系统的核心。 它负责计算出不同文件里的 "),e("code",[t._v("Symbols")]),t._v("  之间的关系，将 "),e("code",[t._v("Type")]),t._v("  赋值给 "),e("code",[t._v("Symbol")]),t._v(" ，并生成任何语义 "),e("code",[t._v("Diagnostic")]),t._v(" （比如：error）。")]),t._v(" "),e("p",[e("code",[t._v("TypeChecker")]),t._v("  首先要做的是合并不同的 "),e("code",[t._v("SourceFile")]),t._v("  里的 "),e("code",[t._v("Symbol")]),t._v("  到一个单独的视图，创建单一的 "),e("code",[t._v("Symbol")]),t._v("  表，合并所有普通的 "),e("code",[t._v("Symbol")]),t._v(" （比如：不同文件里的 "),e("code",[t._v("namespace")]),t._v(" ）。")]),t._v(" "),e("p",[t._v("在原始状态初始化完成后， "),e("code",[t._v("TypeChecker")]),t._v("  就可以解决关于这个程序的任何问题了。 这些 “问题” 可以是：")]),t._v(" "),e("ul",[e("li",[t._v("这个 "),e("code",[t._v("Node")]),t._v("  的 "),e("code",[t._v("Symbol")]),t._v("  是什么？")]),t._v(" "),e("li",[t._v("这个 "),e("code",[t._v("Symbol")]),t._v("  的 "),e("code",[t._v("Type")]),t._v("  是什么？")]),t._v(" "),e("li",[t._v("在 AST 的某个部分里有哪些 "),e("code",[t._v("Symbol")]),t._v("  是可见的？")]),t._v(" "),e("li",[t._v("某个函数声明的 "),e("code",[t._v("Signature")]),t._v("  都有哪些？")]),t._v(" "),e("li",[t._v("针对某个文件应该报哪些错误？")])]),t._v(" "),e("p",[e("code",[t._v("TypeChecker")]),t._v("  计算所有东西都是 “懒惰的”；为了回答一个问题它仅 “解决” 必要的信息。  "),e("code",[t._v("TypeChecker")]),t._v("  仅会检测和这个问题有关的 "),e("code",[t._v("Node")]),t._v(" ， "),e("code",[t._v("Symbol")]),t._v("  或 "),e("code",[t._v("Type")]),t._v(" ，不会检测额外的实体。")]),t._v(" "),e("p",[t._v("对于一个 "),e("code",[t._v("Program")]),t._v("  同样会生成一个 "),e("code",[t._v("Emitter")]),t._v(" 。  "),e("code",[t._v("Emitter")]),t._v("  负责生成给定 "),e("code",[t._v("SourceFile")]),t._v("  的输出；它包括： "),e("code",[t._v(".js")]),t._v(" ， "),e("code",[t._v(".jsx")]),t._v(" ， "),e("code",[t._v(".d.ts")]),t._v("  和 "),e("code",[t._v(".js.map")]),t._v(" 。")]),t._v(" "),e("h2",{attrs:{id:"术语"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#术语"}},[t._v("#")]),t._v(" 术语")]),t._v(" "),e("h4",{attrs:{id:"完整开始-令牌开始-full-start-token-start"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#完整开始-令牌开始-full-start-token-start"}},[t._v("#")]),t._v(" "),e("strong",[t._v("完整开始 / 令牌开始（Full Start/Token Start）")])]),t._v(" "),e("p",[t._v("令牌本身就具有我们称为一个 “完整开始” 和一个 “令牌开始”。“令牌开始” 是指更自然的版本，它表示在文件中令牌开始的位置。“完整开始” 是指从上一个有意义的令牌之后扫描器开始扫描的起始位置。当关心琐事时，我们往往更关心完整开始。")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("函数")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("描述")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("ts.Node.getStart")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("取得某节点的第一个令牌起始位置。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("ts.Node.getFullStart")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("取得某节点拥有的第一个令牌的完整开始。")])])])]),t._v(" "),e("h3",{attrs:{id:"琐碎内容-trivia"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#琐碎内容-trivia"}},[t._v("#")]),t._v(" "),e("strong",[t._v("琐碎内容（Trivia）")])]),t._v(" "),e("p",[t._v("语法的琐碎内容代表源码里那些对理解代码无关紧要的内容，比如空白，注释甚至一些冲突的标记。")]),t._v(" "),e("p",[t._v("因为琐碎内容不是语言正常语法的一部分（不包括 ECMAScript API 规范）并且可能在任意 2 个令牌中的任意位置出现，它们不会包含在语法树里。但是，因为它们对于像重构和维护高保真源码很重要，所以需要的时候还是能够通过我们的 APIs 访问。")]),t._v(" "),e("p",[t._v("因为 "),e("code",[t._v("EndOfFileToken")]),t._v("  后面可以没有任何内容（令牌和琐碎内容），所有琐碎内容自然地在非琐碎内容之前，而且存在于那个令牌的 “完整开始” 和 “令牌开始” 之间。")]),t._v(" "),e("p",[t._v("虽然这个一个方便的标记法来说明一个注释 “属于” 一个 "),e("code",[t._v("Node")]),t._v(" 。比如，在下面的例子里，可以明显看出 "),e("code",[t._v("genie")]),t._v("  函数拥有两个注释：")]),t._v(" "),e("div",{staticClass:"language-typescript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-typescript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" x "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// This is x.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * Postcondition: Grants all three wishes.\n */")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("genie")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("wish1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" wish2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" wish3"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Wish"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Wish"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Wish"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// End function")]),t._v("\n")])])]),e("p",[t._v("这是尽管事实上，函数声明的完整开始是在 "),e("code",[t._v("var x = 10;")]),t._v("  后。")]),t._v(" "),e("p",[t._v("我们依据"),e("a",{attrs:{href:"https://github.com/dotnet/roslyn/wiki/Roslyn%20Overview#syntax-trivia",target:"_blank",rel:"noopener noreferrer"}},[t._v(" Roslyn's notion of trivia ownership"),e("OutboundLink")],1),t._v(" 处理注释所有权。通常来讲，一个令牌拥有同一行上的所有的琐碎内容直到下一个令牌开始。任何出现在这行之后的注释都属于下一个令牌。源文件的第一个令牌拥有所有的初始琐碎内容，并且最后面的一系列琐碎内容会添加到 "),e("code",[t._v("end-of-file")]),t._v("  令牌上。")]),t._v(" "),e("p",[t._v("对于大多数普通用户，注释是 “有趣的” 琐碎内容。属于一个节点的注释内容可以通过下面的函数来获取：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("函数")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("描述")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("ts.getLeadingCommentRanges")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("提供源文件和一个指定位置，返回指定位置后的第一个换行与令牌之间的注释的范围（与 "),e("code",[t._v("ts.Node.getFullStart")]),t._v("  配合会更有用）。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("ts.getTrailingCommentRanges")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("提供源文件和一个指定位置，返回到指定位置后第一个换行为止的注释的范围（与 "),e("code",[t._v("ts.Node.getEnd")]),t._v("  配合会更有用）。")])])])]),t._v(" "),e("p",[t._v("做为例子，假设有下面一部分源代码：")]),t._v(" "),e("div",{staticClass:"language-typescript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-typescript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("debugger")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*hello*/")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//bye")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*hi*/")]),t._v("    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v("\n")])])]),e("p",[e("code",[t._v("function")]),t._v("  关键字的完整开始是从 "),e("code",[t._v("/*hello*/")]),t._v("  注释，但是 "),e("code",[t._v("getLeadingCommentRanges")]),t._v("  仅会返回后面 2 个注释：")]),t._v(" "),e("div",{staticClass:"language-text extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("d e b u g g e r ; / * h e l l o * / _ _ _ _ _ [CR] [NL] _ _ _ _ / / b y e [CR] [NL] _ _ / * h i * / _ _ _ _ f u n c t i o n\n                  ↑                                     ↑       ↑                       ↑                   ↑\n                  完整开始                              查找      第一个注释               第二个注释     令牌开始\n                                                       开始注释\n")])])]),e("p",[t._v("适当地，在 "),e("code",[t._v("debugger")]),t._v("  语句后调用 "),e("code",[t._v("getTrailingCommentRanges")]),t._v("  可以提取出 "),e("code",[t._v("/*hello*/")]),t._v("  注释。")]),t._v(" "),e("p",[t._v("如果你关心令牌流的更多信息， "),e("code",[t._v("createScanner")]),t._v("  也有一个 "),e("code",[t._v("skipTrivia")]),t._v("  标记，你可以设置成 "),e("code",[t._v("false")]),t._v(" ，然后使用 "),e("code",[t._v("setText")]),t._v(" / "),e("code",[t._v("setTextPos")]),t._v("  来扫描文件里的不同位置。")])])}),[],!1,null,null,null);e.default=s.exports}}]);
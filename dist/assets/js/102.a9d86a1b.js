(window.webpackJsonp=window.webpackJsonp||[]).push([[102],{350:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"typescript-2-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#typescript-2-3"}},[t._v("#")]),t._v(" TypeScript 2.3")]),t._v(" "),a("h2",{attrs:{id:"es5-es3-的生成器和迭代支持"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#es5-es3-的生成器和迭代支持"}},[t._v("#")]),t._v(" ES5/ES3 的生成器和迭代支持")]),t._v(" "),a("p",[a("em",[t._v("首先是一些 ES2016 的术语：")])]),t._v(" "),a("h5",{attrs:{id:"迭代器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#迭代器"}},[t._v("#")]),t._v(" 迭代器")]),t._v(" "),a("p",[a("a",{attrs:{href:"http://www.ecma-international.org/ecma-262/6.0/#sec-iteration",target:"_blank",rel:"noopener noreferrer"}},[t._v("ES2015 引入了 "),a("code",[t._v("Iterator")]),t._v(" （迭代器）"),a("OutboundLink")],1),t._v("，它表示提供了 next，return，以及 throw 三个方法的对象，具体满足以下接口：")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Iterator")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("any")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" IteratorResult"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("any")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" IteratorResult"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("any")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" IteratorResult"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("这种迭代器对于迭代可用的值时很有用，比如数组的元素或者 Map 的键。如果一个对象有一个返回 "),a("code",[t._v("Iterator")]),t._v("  对象的 "),a("code",[t._v("Symbol.iterator")]),t._v("  方法，那么我们说这个对象是 “可迭代的”。")]),t._v(" "),a("p",[t._v("迭代器协议还定义了一些 ES2015 中的特性像 "),a("code",[t._v("for..of")]),t._v("  和展开运算符以及解构赋值中的数组的剩余运算的操作对象。")]),t._v(" "),a("h5",{attrs:{id:"生成器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#生成器"}},[t._v("#")]),t._v(" 生成器")]),t._v(" "),a("p",[a("a",{attrs:{href:"http://www.ecma-international.org/ecma-262/6.0/#sec-generatorfunction-objects",target:"_blank",rel:"noopener noreferrer"}},[t._v('ES2015 也引入了 "生成器"'),a("OutboundLink")],1),t._v("，生成器是可以通过 "),a("code",[t._v("Iterator")]),t._v("  接口和 "),a("code",[t._v("yield")]),t._v("  关键字被用来生成部分运算结果的函数。生成器也可以在内部通过 "),a("code",[t._v("yield*")]),t._v("  代理对与其他可迭代对象的调用。举例来说：")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h5",{attrs:{id:"新的-downleveliteration编译选项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#新的-downleveliteration编译选项"}},[t._v("#")]),t._v(" 新的 "),a("code",[t._v("--downlevelIteration")]),t._v("  编译选项")]),t._v(" "),a("p",[t._v("之前迭代器只在编译目标为 ES6/ES2015 或者更新版本时可用。此外，设计迭代器协议的结构，比如 "),a("code",[t._v("for..of")]),t._v(" ，如果编译目标低于 ES6/ES2015，则只能在操作数组时被支持。")]),t._v(" "),a("p",[t._v("TypeScript 2.3 在 ES3 和 ES5 为编译目标时由 "),a("code",[t._v("--downlevelIteration")]),t._v("  编译选项增加了完整的对生成器和迭代器协议的支持。")]),t._v(" "),a("p",[t._v("通过 "),a("code",[t._v("--downlevelIteration")]),t._v("  编译选项，编译器会使用新的类型检查和输出行为，尝试调用被迭代对象的 "),a("code",[t._v("[Symbol.iterator]()")]),t._v("  方法 (如果有)，或者在对象上创建一个语义上的数组迭代器。")]),t._v(" "),a("blockquote",[a("p",[t._v("注意这需要非数组的值有原生的 "),a("code",[t._v("Symbol.iterator")]),t._v("  或者 "),a("code",[t._v("Symbol.iterator")]),t._v("  的运行时模拟实现。")])]),t._v(" "),a("p",[t._v("使用 "),a("code",[t._v("--downlevelIteration")]),t._v("  时，在 ES5/ES3 中 "),a("code",[t._v("for..of")]),t._v("  语句、数组解构、数组中的元素展开、函数调用、new 表达式在支持 "),a("code",[t._v("Symbol.iterator")]),t._v("  时可用，但即便没有定义 "),a("code",[t._v("Symbol.iterator")]),t._v(" ，它们在运行时或开发时都可以被使用到数组上.")]),t._v(" "),a("h2",{attrs:{id:"异步迭代"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异步迭代"}},[t._v("#")]),t._v(" 异步迭代")]),t._v(" "),a("p",[t._v("TypeScript 2.3 添加了对异步迭代器和生成器的支持，描述见当前的"),a("a",{attrs:{href:"https://github.com/tc39/proposal-async-iteration",target:"_blank",rel:"noopener noreferrer"}},[t._v(" TC39 提案"),a("OutboundLink")],1),t._v("。")]),t._v(" "),a("h5",{attrs:{id:"异步迭代器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异步迭代器"}},[t._v("#")]),t._v(" 异步迭代器")]),t._v(" "),a("p",[t._v("异步迭代引入了 "),a("code",[t._v("AsyncIterator")]),t._v(" ，它和 "),a("code",[t._v("Iterator")]),t._v("  相似。实际上的区别在于 "),a("code",[t._v("AsyncIterator")]),t._v("  的 "),a("code",[t._v("next")]),t._v(" 、 "),a("code",[t._v("return")]),t._v("  和 "),a("code",[t._v("throw")]),t._v("  方法的返回的是迭代结果的 "),a("code",[t._v("Promise")]),t._v(" ，而不是结果本身。这允许 "),a("code",[t._v("AsyncIterator")]),t._v("  在生成值之前的时间点就加入异步通知。 "),a("code",[t._v("AsyncIterator")]),t._v("  的接口如下：")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AsyncIterator")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("any")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Promise")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("IteratorResult"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("any")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Promise")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("IteratorResult"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("any")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Promise")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("IteratorResult"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("一个支持异步迭代的对象如果有一个返回 "),a("code",[t._v("AsyncIterator")]),t._v("  对象的 "),a("code",[t._v("Symbol.asyncIterator")]),t._v("  方法，被称作是 “可迭代的”。")]),t._v(" "),a("h5",{attrs:{id:"异步生成器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异步生成器"}},[t._v("#")]),t._v(" 异步生成器")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tc39/proposal-async-iteration",target:"_blank",rel:"noopener noreferrer"}},[t._v("异步迭代提案"),a("OutboundLink")],1),t._v("引入了 “异步生成器”，也就是可以用来生成部分计算结果的异步函数。异步生成器也可以通过 "),a("code",[t._v("yield*")]),t._v("  代理对可迭代对象或异步可迭代对象的调用：")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("g")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sleep")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sleep")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("和生成器一样，异步生成器只能是函数声明，函数表达式，或者类或对象字面量的方法。箭头函数不能作为异步生成器。异步生成器除了一个可用的 "),a("code",[t._v("Symbol.asyncIterator")]),t._v("  引用外 (原生或三方实现)，还需要一个可用的全局 "),a("code",[t._v("Promise")]),t._v("  实现（既可以是原生的，也可以是 ES2015 兼容的实现）。")]),t._v(" "),a("h5",{attrs:{id:"for-await-of语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#for-await-of语句"}},[t._v("#")]),t._v(" "),a("code",[t._v("for-await-of")]),t._v("  语句")]),t._v(" "),a("p",[t._v("最后，ES2015 引入了 "),a("code",[t._v("for..of")]),t._v("  语句来迭代可迭代对象。相似的，异步迭代提案引入了 "),a("code",[t._v("for..await..of")]),t._v("  语句来迭代可异步迭代的对象。")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("of")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("g")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("console")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("code",[t._v("for..await..of")]),t._v("  语句仅在异步函数或异步生成器中可用。")]),t._v(" "),a("h5",{attrs:{id:"注意事项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注意事项"}},[t._v("#")]),t._v(" 注意事项")]),t._v(" "),a("ul",[a("li",[t._v("始终记住我们对于异步迭代器的支持是建立在运行时有 "),a("code",[t._v("Symbol.asyncIterator")]),t._v("  支持的基础上的。你可能需要 "),a("code",[t._v("Symbol.asyncIterator")]),t._v("  的三方实现，虽然对于简单的目的可以仅仅是： "),a("code",[t._v('(Symbol as any).asyncIterator = Symbol.asyncIterator || Symbol.for("Symbol.asyncIterator");')])]),t._v(" "),a("li",[t._v("如果你没有声明 "),a("code",[t._v("AsyncIterator")]),t._v(" ，还需要在 "),a("code",[t._v("--lib")]),t._v("  选项中加入 "),a("code",[t._v("esnext")]),t._v("  来获取 "),a("code",[t._v("AsyncIterator")]),t._v("  声明。")]),t._v(" "),a("li",[t._v("最后，如果你的编译目标是 ES5 或 ES3，你还需要设置 "),a("code",[t._v("--downlevelIterators")]),t._v("  编译选项。")])]),t._v(" "),a("h2",{attrs:{id:"泛型参数默认类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#泛型参数默认类型"}},[t._v("#")]),t._v(" 泛型参数默认类型")]),t._v(" "),a("p",[t._v("TypeScript 2.3 增加了对声明泛型参数默认类型的支持。")]),t._v(" "),a("h5",{attrs:{id:"示例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#示例"}},[t._v("#")]),t._v(" 示例")]),t._v(" "),a("p",[t._v("考虑一个会创建新的 "),a("code",[t._v("HTMLElement")]),t._v("  的函数，调用时不加参数会生成一个 "),a("code",[t._v("Div")]),t._v(" ，你也可以选择性地传入子元素的列表。之前你必须这么去定义：")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("declare")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("create")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Container"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("HTMLDivElement"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" HTMLDivElement"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("declare")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" create"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HTMLElement")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Container"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("declare")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" create"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HTMLElement")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("U")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HTMLElement")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" children"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("U")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Container"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("U")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("有了泛型参数默认类型，我们可以将定义化简为：")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("declare")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" create"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HTMLElement")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" HTMLDivElement"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("U")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" children"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("U")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Container"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("U")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("泛型参数的默认类型遵循以下规则：")]),t._v(" "),a("ul",[a("li",[t._v("有默认类型的类型参数被认为是可选的。")]),t._v(" "),a("li",[t._v("必选的类型参数不能在可选的类型参数后。")]),t._v(" "),a("li",[t._v("如果类型参数有约束，类型参数的默认类型必须满足这个约束。")]),t._v(" "),a("li",[t._v("当指定类型实参时，你只需要指定必选类型参数的类型实参。 未指定的类型参数会被解析为它们的默认类型。")]),t._v(" "),a("li",[t._v("如果指定了默认类型，且类型推断无法选择一个候选类型，那么将使用默认类型作为推断结果。")]),t._v(" "),a("li",[t._v("一个被现有类或接口合并的类或者接口的声明可以为现有类型参数引入默认类型。")]),t._v(" "),a("li",[t._v("一个被现有类或接口合并的类或者接口的声明可以引入新的类型参数，只要它指定了默认类型。")])]),t._v(" "),a("h2",{attrs:{id:"新的-strict主要编译选项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#新的-strict主要编译选项"}},[t._v("#")]),t._v(" 新的 "),a("code",[t._v("--strict")]),t._v("  主要编译选项")]),t._v(" "),a("p",[t._v("TypeScript 加入的新检查项为了避免不兼容现有项目通常都是默认关闭的。虽然避免不兼容是好事，但这个策略的一个弊端则是使配置最高类型安全越来越复杂，这么做每次 TypeScript 版本发布时都需要显示地加入新选项。有了 "),a("code",[t._v("--strict")]),t._v("  编译选项，就可以选择最高级别的类型安全（了解随着更新版本的编译器增加了增强的类型检查特性可能会报新的错误）。")]),t._v(" "),a("p",[t._v("新的 "),a("code",[t._v("--strict")]),t._v("  编译器选项包含了一些建议配置的类型检查选项。具体来说，指定 "),a("code",[t._v("--strict")]),t._v("  相当于是指定了以下所有选项（未来还可能包括更多选项）：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("--strictNullChecks")])]),t._v(" "),a("li",[a("code",[t._v("--noImplicitAny")])]),t._v(" "),a("li",[a("code",[t._v("--noImplicitThis")])]),t._v(" "),a("li",[a("code",[t._v("--alwaysStrict")])])]),t._v(" "),a("p",[t._v("确切地说， "),a("code",[t._v("--strict")]),t._v("  编译选项会为以上列出的编译器选项设置默认值。这意味着还可以单独控制这些选项。比如：")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("--strict --noImplicitThis "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n")])])]),a("p",[t._v("这将是开启除 "),a("code",[t._v("--noImplicitThis")]),t._v("  编译选项以外的所有严格检查选项。使用这个方式可以表述除某些明确列出的项以外的所有严格检查项。换句话说，现在可以在默认最高级别的类型安全下排除部分检查。")]),t._v(" "),a("p",[t._v("从 TypeScript 2.3 开始， "),a("code",[t._v("tsc --init")]),t._v("  生成的默认 "),a("code",[t._v("tsconfig.json")]),t._v("  在 "),a("code",[t._v('"compilerOptions"')]),t._v("  中包含了 "),a("code",[t._v('"strict: true"')]),t._v("  设置。这样一来，用 "),a("code",[t._v("tsc --init")]),t._v("  创建的新项目默认会开启最高级别的类型安全。")]),t._v(" "),a("h2",{attrs:{id:"改进的-init输出"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#改进的-init输出"}},[t._v("#")]),t._v(" 改进的 "),a("code",[t._v("--init")]),t._v("  输出")]),t._v(" "),a("p",[t._v("除了默认的 "),a("code",[t._v("--strict")]),t._v("  设置外， "),a("code",[t._v("tsc --init")]),t._v("  还改进了输出。 "),a("code",[t._v("tsc --init")]),t._v("  默认生成的 "),a("code",[t._v("tsconfig.json")]),t._v("  文件现在包含了一些带描述的被注释掉的常用编译器选项。你可以去掉相关选项的注释来获得期望的结果。我们希望新的输出能简化新项目的配置并且随着项目成长保持配置文件的可读性。")]),t._v(" "),a("h2",{attrs:{id:"checkjs选项下-js-文件中的错误"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#checkjs选项下-js-文件中的错误"}},[t._v("#")]),t._v(" "),a("code",[t._v("--checkJS")]),t._v("  选项下 .js 文件中的错误")]),t._v(" "),a("p",[t._v("即便使用了 "),a("code",[t._v("--allowJs")]),t._v(" ，TypeScript 编译器默认不会报 .js 文件中的任何错误。TypeScript 2.3 中使用 "),a("code",[t._v("--checkJs")]),t._v("  选项， "),a("code",[t._v(".js")]),t._v("  文件中的类型检查错误也可以被报出.")]),t._v(" "),a("p",[t._v("你可以通过为它们添加 "),a("code",[t._v("// @ts-nocheck")]),t._v("  注释来跳过对某些文件的检查，反过来你也可以选择通过添加 "),a("code",[t._v("// @ts-check")]),t._v("  注释只检查一些 "),a("code",[t._v(".js")]),t._v("  文件而不需要设置 "),a("code",[t._v("--checkJs")]),t._v("  编译选项。你也可以通过添加 "),a("code",[t._v("// @ts-ignore")]),t._v("  到特定行的一行前来忽略这一行的错误.")]),t._v(" "),a("p",[a("code",[t._v(".js")]),t._v("  文件仍然会被检查确保只有标准的 ECMAScript 特性，类型标注仅在 "),a("code",[t._v(".ts")]),t._v("  文件中被允许，在 "),a("code",[t._v(".js")]),t._v("  中会被标记为错误。JSDoc 注释可以用来为你的 JavaScript 代码添加某些类型信息，更多关于支持的 JSDoc 结构的详情，请浏览"),a("a",{attrs:{href:"https://github.com/Microsoft/TypeScript/wiki/JSDoc-support-in-JavaScript",target:"_blank",rel:"noopener noreferrer"}},[t._v(" JSDoc 支持文档"),a("OutboundLink")],1),t._v("。")]),t._v(" "),a("p",[t._v("有关详细信息，请浏览"),a("a",{attrs:{href:"https://github.com/Microsoft/TypeScript/wiki/Type-Checking-JavaScript-Files",target:"_blank",rel:"noopener noreferrer"}},[t._v("类型检查 JavaScript 文件文档"),a("OutboundLink")],1),t._v("。")])])}),[],!1,null,null,null);s.default=e.exports}}]);
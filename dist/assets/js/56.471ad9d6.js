(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{321:function(t,s,e){"use strict";e.r(s);var v=e(0),_=Object(v.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[t._v("工程引用是 TypeScript 3.0 的新特性，它支持将 TypeScript 程序的结构分割成更小的组成部分。")]),t._v(" "),e("p",[t._v("这样可以改善构建时间，强制在逻辑上对组件进行分离，更好地组织你的代码。")]),t._v(" "),e("p",[t._v("TypeScript 3.0 还引入了 "),e("code",[t._v("tsc")]),t._v("  的一种新模式，即 "),e("code",[t._v("--build")]),t._v("  标记，它与工程引用协同工作可以加速 TypeScript 的构建。")]),t._v(" "),e("h1",{attrs:{id:"一个工程示例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一个工程示例"}},[t._v("#")]),t._v(" 一个工程示例")]),t._v(" "),e("p",[t._v("让我们来看一个非常普通的工程，并瞧瞧工程引用特性是如何帮助我们更好地组织代码的。\n假设这个工程具有两个模块： "),e("code",[t._v("converter")]),t._v("  和 "),e("code",[t._v("unites")]),t._v(" ，以及相应的测试代码：")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[t._v("/src/converter.ts\n/src/units.ts\n/test/converter-tests.ts\n/test/units-tests.ts\n/tsconfig.json\n")])])]),e("p",[t._v("测试文件导入相应的实现文件并进行测试：")]),t._v(" "),e("div",{staticClass:"language-ts extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ts"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// converter-tests.ts")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" converter "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"../converter"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nassert"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("areEqual")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("converter"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("celsiusToFahrenheit")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("在之前，这种使用单一 "),e("code",[t._v("tsconfig")]),t._v("  文件的结构会稍显笨拙：")]),t._v(" "),e("ul",[e("li",[t._v("实现文件也可以导入测试文件")]),t._v(" "),e("li",[t._v("无法同时构建 "),e("code",[t._v("test")]),t._v("  和 "),e("code",[t._v("src")]),t._v(" ，除非把 "),e("code",[t._v("src")]),t._v("  也放在输出文件夹中，但通常并不想这样做")]),t._v(" "),e("li",[t._v("仅对实现文件的"),e("em",[t._v("内部")]),t._v("细节进行改动，必需再次对测试进行"),e("em",[t._v("类型检查")]),t._v("，尽管这是根本不必要的")]),t._v(" "),e("li",[t._v("仅对测试文件进行改动，必需再次对实现文件进行"),e("em",[t._v("类型检查")]),t._v("，尽管其实什么都没有变")])]),t._v(" "),e("p",[t._v("你可以使用多个 "),e("code",[t._v("tsconfig")]),t._v("  文件来解决"),e("em",[t._v("部分")]),t._v("问题，但是又会出现新问题：")]),t._v(" "),e("ul",[e("li",[t._v("缺少内置的实时检查，因此你得多次运行 "),e("code",[t._v("tsc")])]),t._v(" "),e("li",[t._v("多次调用 "),e("code",[t._v("tsc")]),t._v("  会增加我们等待的时间")]),t._v(" "),e("li",[e("code",[t._v("tsc -w")]),t._v("  不能一次在多个配置文件上运行")])]),t._v(" "),e("p",[t._v("工程引用可以解决全部这些问题，而且还不止。")]),t._v(" "),e("h1",{attrs:{id:"何为工程引用？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#何为工程引用？"}},[t._v("#")]),t._v(" 何为工程引用？")]),t._v(" "),e("p",[e("code",[t._v("tsconfig.json")]),t._v("  增加了一个新的顶层属性 "),e("code",[t._v("references")]),t._v(" 。它是一个对象的数组，指明要引用的工程：")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"compilerOptions"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The usual")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"references"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"path"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"../src"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("每个引用的 "),e("code",[t._v("path")]),t._v("  属性都可以指向到包含 "),e("code",[t._v("tsconfig.json")]),t._v("  文件的目录，或者直接指向到配置文件本身（名字是任意的）。")]),t._v(" "),e("p",[t._v("当你引用一个工程时，会发生下面的事：")]),t._v(" "),e("ul",[e("li",[t._v("导入引用工程中的模块实际加载的是它"),e("em",[t._v("输出")]),t._v("的声明文件（ "),e("code",[t._v(".d.ts")]),t._v(" ）。")]),t._v(" "),e("li",[t._v("如果引用的工程生成一个 "),e("code",[t._v("outFile")]),t._v(" ，那么这个输出文件的 "),e("code",[t._v(".d.ts")]),t._v("  文件里的声明对于当前工程是可见的。")]),t._v(" "),e("li",[t._v("构建模式（后文）会根据需要自动地构建引用的工程。")])]),t._v(" "),e("p",[t._v("当你拆分成多个工程后，会显著地加速类型检查和编译，减少编辑器的内存占用，还会改善程序在逻辑上进行分组。")]),t._v(" "),e("h1",{attrs:{id:"composite"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#composite"}},[t._v("#")]),t._v(" "),e("code",[t._v("composite")])]),t._v(" "),e("p",[t._v("引用的工程必须启用新的 "),e("code",[t._v("composite")]),t._v("  设置。\n这个选项用于帮助 TypeScript 快速确定引用工程的输出文件位置。\n若启用 "),e("code",[t._v("composite")]),t._v("  标记则会发生如下变动：")]),t._v(" "),e("ul",[e("li",[t._v("对于 "),e("code",[t._v("rootDir")]),t._v("  设置，如果没有被显式指定，默认为包含 "),e("code",[t._v("tsconfig")]),t._v("  文件的目录")]),t._v(" "),e("li",[t._v("所有的实现文件必须匹配到某个 "),e("code",[t._v("include")]),t._v("  模式或在 "),e("code",[t._v("files")]),t._v("  数组里列出。如果违反了这个限制， "),e("code",[t._v("tsc")]),t._v("  会提示你哪些文件未指定。")]),t._v(" "),e("li",[t._v("必须开启 "),e("code",[t._v("declaration")]),t._v("  选项。")])]),t._v(" "),e("h1",{attrs:{id:"declarationmaps"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#declarationmaps"}},[t._v("#")]),t._v(" "),e("code",[t._v("declarationMap")]),t._v(" s")]),t._v(" "),e("p",[t._v("我们增加了对"),e("a",{attrs:{href:"https://github.com/Microsoft/TypeScript/issues/14479",target:"_blank",rel:"noopener noreferrer"}},[t._v(" declaration source maps"),e("OutboundLink")],1),t._v(" 的支持。\n如果启用 "),e("code",[t._v("--declarationMap")]),t._v(" ，在某些编辑器上，你可以使用诸如 “Go to Definition”，重命名以及跨工程编辑文件等编辑器特性。")]),t._v(" "),e("h1",{attrs:{id:"带prepend的outfile"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#带prepend的outfile"}},[t._v("#")]),t._v(" 带 "),e("code",[t._v("prepend")]),t._v("  的 "),e("code",[t._v("outFile")])]),t._v(" "),e("p",[t._v("你可以在引用中使用 "),e("code",[t._v("prepend")]),t._v("  选项来启用前置某个依赖的输出：")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("   "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"references"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n       "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"path"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"../utils"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"prepend"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),e("p",[t._v("前置工程会将工程的输出添加到当前工程的输出之前。\n它对 "),e("code",[t._v(".js")]),t._v("  文件和 "),e("code",[t._v(".d.ts")]),t._v("  文件都有效， "),e("code",[t._v("source map")]),t._v("  文件也同样会正确地生成。")]),t._v(" "),e("p",[e("code",[t._v("tsc")]),t._v("  永远只会使用磁盘上已经存在的文件来进行这个操作，因此你可能会创建出一个无法生成正确输出文件的工程，因为有些工程的输出可能会在结果文件中重覆了多次。\n例如：")]),t._v(" "),e("div",{staticClass:"language-txt extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("   A\n  ^ ^\n /   \\\nB     C\n ^   ^\n  \\ /\n   D\n")])])]),e("p",[t._v("这种情况下，不能前置引用，因为在 "),e("code",[t._v("D")]),t._v("  的最终输出里会有两份 "),e("code",[t._v("A")]),t._v("  存在 - 这可能会发生未知错误。")]),t._v(" "),e("h1",{attrs:{id:"关于工程引用的说明"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#关于工程引用的说明"}},[t._v("#")]),t._v(" 关于工程引用的说明")]),t._v(" "),e("p",[t._v("工程引用在某些方面需要你进行权衡.")]),t._v(" "),e("p",[t._v("因为有依赖的工程要使用它的依赖生成的 "),e("code",[t._v(".d.ts")]),t._v(" ，因此你必须要检查相应构建后的输出"),e("em",[t._v("或")]),t._v("在下载源码后进行构建，然后才能在编辑器里自由地导航。\n我们是在操控幕后的 "),e("code",[t._v(".d.ts")]),t._v("  生成过程，我们应该减少这种情况，但是目前还们建议提示开发者在下载源码后进行构建。")]),t._v(" "),e("p",[t._v("此外，为了兼容已有的构建流程， "),e("code",[t._v("tsc")]),t._v(" "),e("em",[t._v(" 不会")]),t._v("自动地构建依赖项，除非启用了 "),e("code",[t._v("--build")]),t._v("  选项。\n下面让我们看看 "),e("code",[t._v("--build")]),t._v(" 。")]),t._v(" "),e("h1",{attrs:{id:"typescript构建模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#typescript构建模式"}},[t._v("#")]),t._v(" TypeScript 构建模式")]),t._v(" "),e("p",[t._v("在 TypeScript 工程里支持增量构建是个期待已久的功能。\n在 TypeScrpt 3.0 里，你可以在 "),e("code",[t._v("tsc")]),t._v("  上使用 "),e("code",[t._v("--build")]),t._v("  标记。\n它实际上是个新的 "),e("code",[t._v("tsc")]),t._v("  入口点，它更像是一个构建的协调员而不是简简单单的编译器。")]),t._v(" "),e("p",[t._v("运行 "),e("code",[t._v("tsc --build")]),t._v(" （简写 "),e("code",[t._v("tsc -b")]),t._v(" ）会执行如下操作：")]),t._v(" "),e("ul",[e("li",[t._v("找到所有引用的工程")]),t._v(" "),e("li",[t._v("检查它们是否为最新版本")]),t._v(" "),e("li",[t._v("按顺序构建非最新版本的工程")])]),t._v(" "),e("p",[t._v("可以给 "),e("code",[t._v("tsc -b")]),t._v("  指定多个配置文件地址（例如： "),e("code",[t._v("tsc -b src test")]),t._v(" ）。\n如同 "),e("code",[t._v("tsc -p")]),t._v(" ，如果配置文件名为 "),e("code",[t._v("tsconfig.json")]),t._v(" ，那么文件名则可省略。")]),t._v(" "),e("h2",{attrs:{id:"tsc-b命令行"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tsc-b命令行"}},[t._v("#")]),t._v(" "),e("code",[t._v("tsc -b")]),t._v("  命令行")]),t._v(" "),e("p",[t._v("你可以指令任意数量的配置文件：")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" tsc -b                                "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Run the tsconfig.json in the current directory")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" tsc -b src                            "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Run src/tsconfig.json")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" tsc -b foo/prd.tsconfig.json bar  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Run foo/prd.tsconfig.json and bar/tsconfig.json")]),t._v("\n")])])]),e("p",[t._v("不需要担心命令行上指定的文件顺序 -  "),e("code",[t._v("tsc")]),t._v("  会根据需要重新进行排序，被依赖的项会优先构建。")]),t._v(" "),e("p",[e("code",[t._v("tsc -b")]),t._v("  还支持其它一些选项：")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("--verbose")]),t._v(" ：打印详细的日志（可以与其它标记一起使用）")]),t._v(" "),e("li",[e("code",[t._v("--dry")]),t._v(" : 显示将要执行的操作但是并不真正进行这些操作")]),t._v(" "),e("li",[e("code",[t._v("--clean")]),t._v(" : 删除指定工程的输出（可以与 "),e("code",[t._v("--dry")]),t._v("  一起使用）")]),t._v(" "),e("li",[e("code",[t._v("--force")]),t._v(" : 把所有工程当作非最新版本对待")]),t._v(" "),e("li",[e("code",[t._v("--watch")]),t._v(" : 观察模式（可以与 "),e("code",[t._v("--verbose")]),t._v("  一起使用）")])]),t._v(" "),e("h1",{attrs:{id:"说明"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#说明"}},[t._v("#")]),t._v(" 说明")]),t._v(" "),e("p",[t._v("一般情况下，就算代码里有语法或类型错误， "),e("code",[t._v("tsc")]),t._v("  也会生成输出（ "),e("code",[t._v(".js")]),t._v("  和 "),e("code",[t._v(".d.ts")]),t._v(" ），除非你启用了 "),e("code",[t._v("noEmitOnError")]),t._v("  选项。\n这在增量构建系统里就不好了 - 如果某个过期的依赖里有一个新的错误，那么你只能看到它"),e("em",[t._v("一次")]),t._v("，因为后续的构建会跳过这个最新的工程。\n正是这个原因， "),e("code",[t._v("tsc -b")]),t._v("  的作用就好比在所有工程上启用了 "),e("code",[t._v("noEmitOnError")]),t._v(" 。")]),t._v(" "),e("p",[t._v("如果你想要提交所有的构建输出（ "),e("code",[t._v(".js")]),t._v(" ,  "),e("code",[t._v(".d.ts")]),t._v(" ,  "),e("code",[t._v(".d.ts.map")]),t._v("  等），你可能需要运行 "),e("code",[t._v("--force")]),t._v("  来构建，因为一些源码版本管理操作依赖于源码版本管理工具保存的本地拷贝和远程拷贝的时间戳。")]),t._v(" "),e("h1",{attrs:{id:"msbuild"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#msbuild"}},[t._v("#")]),t._v(" MSBuild")]),t._v(" "),e("p",[t._v("如果你的工程使用 msbuild，你可以用下面的方式开启构建模式。")]),t._v(" "),e("div",{staticClass:"language-xml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-xml"}},[e("code",[t._v("    "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("TypeScriptBuildMode")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("true"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("TypeScriptBuildMode")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),e("p",[t._v("将这段代码添加到 "),e("code",[t._v("proj")]),t._v("  文件。它会自动地启用增量构建模式和清理工作。")]),t._v(" "),e("p",[t._v("注意，在使用 "),e("code",[t._v("tsconfig.json")]),t._v("  /  "),e("code",[t._v("-p")]),t._v("  时，已存在的 TypeScript 工程属性会被忽略 - 因此所有的设置需要在 "),e("code",[t._v("tsconfig")]),t._v("  文件里进行。")]),t._v(" "),e("p",[t._v("一些团队已经设置好了基于 msbuild 的构建流程，并且 "),e("code",[t._v("tsconfig")]),t._v("  文件具有和它们匹配的工程一致的"),e("em",[t._v("隐式")]),t._v("图序。\n若你的项目如此，那么可以继续使用 "),e("code",[t._v("msbuild")]),t._v("  和 "),e("code",[t._v("tsc -p")]),t._v("  以及工程引用；它们是完全互通的。")]),t._v(" "),e("h1",{attrs:{id:"指导"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#指导"}},[t._v("#")]),t._v(" 指导")]),t._v(" "),e("h2",{attrs:{id:"整体结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#整体结构"}},[t._v("#")]),t._v(" 整体结构")]),t._v(" "),e("p",[t._v("当 "),e("code",[t._v("tsconfig.json")]),t._v("  多了以后，通常会使用"),e("a",{attrs:{href:"https://www.typescriptlang.org/docs/handbook/tsconfig-json.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("配置文件继承"),e("OutboundLink")],1),t._v("来集中管理公共的编译选项。\n这样你就可以在一个文件里更改配置而不必在多个文件中进行修改。")]),t._v(" "),e("p",[t._v("另一个最佳实践是有一个 "),e("code",[t._v("solution")]),t._v("  级别的 "),e("code",[t._v("tsconfig.json")]),t._v("  文件，它仅仅用于引用所有的子工程。\n它用于提供一个简单的入口；比如，在 TypeScript 源码里，我们可以简单地运行 "),e("code",[t._v("tsc -b src")]),t._v("  来构建所有的节点，因为我们在 "),e("code",[t._v("src/tsconfig.json")]),t._v("  文件里列出了所有的子工程。\n注意从 3.0 开始，如果 "),e("code",[t._v("tsconfig.json")]),t._v("  文件里有至少一个工程引用 "),e("code",[t._v("reference")]),t._v(" ，那么 "),e("code",[t._v("files")]),t._v("  数组为空的话也不会报错。")]),t._v(" "),e("p",[t._v("你可以在 TypeScript 源码仓库里看到这些模式 - 阅读 "),e("code",[t._v("src/tsconfig_base.json")]),t._v(" ， "),e("code",[t._v("src/tsconfig.json")]),t._v("  和 "),e("code",[t._v("src/tsc/tsconfig.json")]),t._v(" 。")]),t._v(" "),e("h2",{attrs:{id:"相对模块的结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#相对模块的结构"}},[t._v("#")]),t._v(" 相对模块的结构")]),t._v(" "),e("p",[t._v("通常地，将代码转成使用相对模块并不需要改动太多。\n只需在某个给定父目录的每个子目录里放一个 "),e("code",[t._v("tsconfig.json")]),t._v("  文件，并相应添加 "),e("code",[t._v("reference")]),t._v(" 。\n然后将 "),e("code",[t._v("outDir")]),t._v("  指定为输出目录的子目录或将 "),e("code",[t._v("rootDir")]),t._v("  指定为所有工程的某个公共根目录。")]),t._v(" "),e("h2",{attrs:{id:"outfile的结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#outfile的结构"}},[t._v("#")]),t._v(" "),e("code",[t._v("outFile")]),t._v("  的结构")]),t._v(" "),e("p",[t._v("使用了 "),e("code",[t._v("outFile")]),t._v("  的编译输出结构十分灵活，因为相对路径是无关紧要的。\n要注意的是，你通常不需要使用 "),e("code",[t._v("prepend")]),t._v("  - 因为这会改善构建时间并结省 I/O。\nTypeScript 项目本身是一个好的参照 - 我们有一些 “library” 的工程和一些 “endpoint” 工程，“endpoint” 工程会确保足够小并仅仅导入它们需要的 “library”。")])])}),[],!1,null,null,null);s.default=_.exports}}]);
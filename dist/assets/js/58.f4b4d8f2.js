(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{321:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),a("p",[t._v("自 ECMAScript 2015 起， "),a("code",[t._v("symbol")]),t._v("  成为了一种新的原生类型，就像 "),a("code",[t._v("number")]),t._v("  和 "),a("code",[t._v("string")]),t._v("  一样。")]),t._v(" "),a("p",[a("code",[t._v("symbol")]),t._v("  类型的值是通过 "),a("code",[t._v("Symbol")]),t._v("  构造函数创建的。")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" sym1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Symbol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" sym2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Symbol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"key"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 可选的字符串key")]),t._v("\n")])])]),a("p",[t._v("Symbols 是不可改变且唯一的。")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" sym2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Symbol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"key"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" sym3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Symbol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"key"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nsym2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" sym3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false, symbols是唯一的")]),t._v("\n")])])]),a("p",[t._v("像字符串一样，symbols 也可以被用做对象属性的键。")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" sym "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Symbol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("sym"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"value"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("console")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("sym"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "value"')]),t._v("\n")])])]),a("p",[t._v("Symbols 也可以与计算出的属性名声明相结合来声明对象的属性和类成员。")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" getClassNameSymbol "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Symbol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("C")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("getClassNameSymbol"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"C"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("C")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" className "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("getClassNameSymbol"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "C"')]),t._v("\n")])])]),a("h1",{attrs:{id:"众所周知的symbols"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#众所周知的symbols"}},[t._v("#")]),t._v(" 众所周知的 Symbols")]),t._v(" "),a("p",[t._v("除了用户定义的 symbols，还有一些已经众所周知的内置 symbols。\n内置 symbols 用来表示语言内部的行为。")]),t._v(" "),a("p",[t._v("以下为这些 symbols 的列表：")]),t._v(" "),a("h2",{attrs:{id:"symbol-hasinstance"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#symbol-hasinstance"}},[t._v("#")]),t._v(" "),a("code",[t._v("Symbol.hasInstance")])]),t._v(" "),a("p",[t._v("方法，会被 "),a("code",[t._v("instanceof")]),t._v("  运算符调用。构造器对象用来识别一个对象是否是其实例。")]),t._v(" "),a("h2",{attrs:{id:"symbol-isconcatspreadable"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#symbol-isconcatspreadable"}},[t._v("#")]),t._v(" "),a("code",[t._v("Symbol.isConcatSpreadable")])]),t._v(" "),a("p",[t._v("布尔值，表示当在一个对象上调用 "),a("code",[t._v("Array.prototype.concat")]),t._v("  时，这个对象的数组元素是否可展开。")]),t._v(" "),a("h2",{attrs:{id:"symbol-iterator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#symbol-iterator"}},[t._v("#")]),t._v(" "),a("code",[t._v("Symbol.iterator")])]),t._v(" "),a("p",[t._v("方法，被 "),a("code",[t._v("for-of")]),t._v("  语句调用。返回对象的默认迭代器。")]),t._v(" "),a("h2",{attrs:{id:"symbol-match"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#symbol-match"}},[t._v("#")]),t._v(" "),a("code",[t._v("Symbol.match")])]),t._v(" "),a("p",[t._v("方法，被 "),a("code",[t._v("String.prototype.match")]),t._v("  调用。正则表达式用来匹配字符串。")]),t._v(" "),a("h2",{attrs:{id:"symbol-replace"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#symbol-replace"}},[t._v("#")]),t._v(" "),a("code",[t._v("Symbol.replace")])]),t._v(" "),a("p",[t._v("方法，被 "),a("code",[t._v("String.prototype.replace")]),t._v("  调用。正则表达式用来替换字符串中匹配的子串。")]),t._v(" "),a("h2",{attrs:{id:"symbol-search"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#symbol-search"}},[t._v("#")]),t._v(" "),a("code",[t._v("Symbol.search")])]),t._v(" "),a("p",[t._v("方法，被 "),a("code",[t._v("String.prototype.search")]),t._v("  调用。正则表达式返回被匹配部分在字符串中的索引。")]),t._v(" "),a("h2",{attrs:{id:"symbol-species"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#symbol-species"}},[t._v("#")]),t._v(" "),a("code",[t._v("Symbol.species")])]),t._v(" "),a("p",[t._v("函数值，为一个构造函数。用来创建派生对象。")]),t._v(" "),a("h2",{attrs:{id:"symbol-split"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#symbol-split"}},[t._v("#")]),t._v(" "),a("code",[t._v("Symbol.split")])]),t._v(" "),a("p",[t._v("方法，被 "),a("code",[t._v("String.prototype.split")]),t._v("  调用。正则表达式来用分割字符串。")]),t._v(" "),a("h2",{attrs:{id:"symbol-toprimitive"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#symbol-toprimitive"}},[t._v("#")]),t._v(" "),a("code",[t._v("Symbol.toPrimitive")])]),t._v(" "),a("p",[t._v("方法，被 "),a("code",[t._v("ToPrimitive")]),t._v("  抽象操作调用。把对象转换为相应的原始值。")]),t._v(" "),a("h2",{attrs:{id:"symbol-tostringtag"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#symbol-tostringtag"}},[t._v("#")]),t._v(" "),a("code",[t._v("Symbol.toStringTag")])]),t._v(" "),a("p",[t._v("方法，被内置方法 "),a("code",[t._v("Object.prototype.toString")]),t._v("  调用。返回创建对象时默认的字符串描述。")]),t._v(" "),a("h2",{attrs:{id:"symbol-unscopables"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#symbol-unscopables"}},[t._v("#")]),t._v(" "),a("code",[t._v("Symbol.unscopables")])]),t._v(" "),a("p",[t._v("对象，它自己拥有的属性会被 "),a("code",[t._v("with")]),t._v("  作用域排除在外。")])])}),[],!1,null,null,null);s.default=e.exports}}]);